Il progetto prevede l'implementazione del problema di concorrenza produttore/consumatore, ovvero thread paralleli e concorrenti che accedono a messaggi depositati sullo stesso buffer; tale buffer è implementato con accesso di tipo FIFO (quindi il consumatore consuma il messaggio meno recente).
Il buffer è implementato mediante array di messaggi: all'interno del buffer sono ospitati contatori dedicati che si incrementano rispettivamente per ogni produzione e per ogni consumazione; in fase di inserimento/estrazione, per accedere alla posizione corretta dell'array occorre utilizzare il modulo della dimensione massima dell'array stesso; ad esempio, se l'array è di 5 elementi e ne ho prodotti 5 saturandolo, alla prima estrazione si libererà la prima posizione dell'array (la meno recente) accessibile mediante espressione (contatore_inserimenti mod dimensione_array), nell'esempio (6 % 5) = 1, quindi l'elemento indice 0 dell'array.
Una consumazione bloccante in caso di buffer vuoto attende la prossima produzione per essere risvegliata, mutuamente la produzione in caso di buffer pieno attende la prossima consumazione del messaggio meno recente per essere risvegliata e inserire nella posizione del messaggio appena estratto. Le consumazioni/produzioni non bloccanti restituiscono errore se il buffer è vuoto/pieno, la verifica è effettuata confrontando la variabile del buffer che tiene traccia dinamicamente degli elementi inseriti/rimossi con il numero massimo di elementi ospitabili.
In termini di strumenti di sincronizzazione il buffer ospita un mutex per accedere in modo eslusivo al buffer durante le operazioni di alterazione degli elementi contenuti (messaggi e indici) e due condition variable per risvegliare eventuali produttori in caso di buffer non più pieno ed eventuali consumatori in caso di buffer non più vuoto.

Per facilitare le attività di debugging all'iinterno del codice sono state inserite delle trace su standard output mediante printf, alla fine dell'esecuzione rimane comunque il summary di CUnit per descrivere complessivamente e in maniera sintetica l'andamento dei test.
Come da specifica si allegano esclusivamente file sorgenti (prod_cons_pthreads.c, prod_cons_pthreads.h, prod_cons_test.c) oltre al presente readme di progetto.
per compilare (prerequisito: lib cunit, header file CUnit in ./CUnit): gcc prod_cons_test.c prod_cons_pthreads.c -lcunit -lpthread -o prod_cons_test
per eseguire test suites: ./prod_cons_test

